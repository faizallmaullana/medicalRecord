package medicalrecord

import (
	"net/http"
	"time"

	"github.com/faizallmaullana/simrs/models"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type InputMedicalRecord struct {
	Nik                       string `json:"nik"`
	Name                      string `json:"name"`
	Address                   string `json:"address"`
	Diagnosis                 string `json:"diagnosis"`
	Medicine                  string `json:"medicine"`
	Doses                     string `json:"doses"`
	FrequencyOfTakingMedicine string `json:"frequency_medicine"`
	PeriodOfTakingMedicine    string `json:"period_medicine"`
	IdDokter                  string `json:"id_dokter"`
}

// menambahkan pasien yang baru berobat
// (pasien belum pernah berobat di klinik)
// POST medical record full
func AddNewMedicalRecord(c *gin.Context) {
	var medRecord_patient string
	var medRecord_diagnosis string
	var medRecord_medicine string

	var input InputMedicalRecord
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// from id user to id dokter
	var Dokter models.Users
	if err := models.DB.Where("id = ?", input.IdDokter).First(&Dokter).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Datamu Tidak Ditemukan"})
		return
	}

	// autogenerated
	idMedicalRecord := uuid.New().String()
	created := time.Now().UTC().Add(7 * time.Hour)

	// NOTE!!: tambahkan jika data tidak kosong maka isi diagnosis dan medicine

	var patient models.Patient
	if err := models.DB.Where("nik = ?", input.Nik).First(&patient).Error; err != nil {
		idPasien := uuid.New().String()
		idCounting := uuid.New().String()

		dataPatient := models.Patient{
			ID:      idPasien,
			Nik:     input.Nik,
			Name:    input.Name,
			Address: input.Address,
		}

		countPatient := models.CountPatient{
			ID:        idCounting,
			PatientID: idPasien,
			Total:     1,
		}

		models.DB.Create(&dataPatient)
		models.DB.Create(&countPatient)

		medRecord_patient = idPasien

	} else {

		var count models.CountPatient
		if err := models.DB.Where("patient_id = ?", patient.ID).First(&count).Error; err != nil {
			return
		}
		count.Total++
		models.DB.Save(count)

		medRecord_patient = patient.ID
	}

	var medicine models.Medicine
	if err := models.DB.Where("medicine = ?", input.Medicine).First(&medicine).Error; err != nil {
		idMedicine := uuid.New().String()

		dataMedicine := models.Medicine{
			ID:       idMedicine,
			Medicine: input.Medicine,
			Total:    1,
		}

		models.DB.Create(&dataMedicine)

		medRecord_medicine = idMedicine

	} else {

		medicine.Total++
		models.DB.Save(&medicine)

		medRecord_medicine = medicine.ID
	}

	var diagnos models.Diagnosis
	if err := models.DB.Where("diagnosis = ?", input.Diagnosis).First(&diagnos).Error; err != nil {
		idDiagnosis := uuid.New().String()

		dataDiagnosis := models.Diagnosis{
			ID:        idDiagnosis,
			Diagnosis: input.Diagnosis,
			Total:     1,
		}
		models.DB.Create(&dataDiagnosis)

		medRecord_diagnosis = idDiagnosis

	} else {

		diagnos.Total++
		models.DB.Save(&diagnos)

		medRecord_diagnosis = diagnos.ID
	}

	dataMedicalRecord := models.MedicalRecord{
		ID:                        idMedicalRecord,
		PatientID:                 medRecord_patient,
		DiagnosisID:               medRecord_diagnosis,
		MedicineID:                medRecord_medicine,
		DokterID:                  Dokter.ProfileID,
		Doses:                     input.Doses,
		FrequencyOfTakingMedicine: input.FrequencyOfTakingMedicine,
		PeriodOfTakingMedicine:    input.PeriodOfTakingMedicine,
		CreatedAt:                 created,
	}

	models.DB.Create(&dataMedicalRecord)

	c.JSON(http.StatusCreated, gin.H{"message": "Data berhasil direkam"})
}
